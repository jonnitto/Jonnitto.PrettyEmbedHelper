prototype(Jonnitto.PrettyEmbed:Presentation.Iframe) < prototype(Neos.Fusion:Component) {
    @propTypes {
        player = ${PropTypes.oneOf(['YouTube', 'Vimeo']).isRequired}
        class = ${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.string ) )}
        id = ${PropTypes.string}
        label = ${PropTypes.string}
        href = ${PropTypes.string}
        embedHref = ${PropTypes.string}
        preview = ${PropTypes.string}
        poster = ${PropTypes.string}
        poster2x = ${PropTypes.string}
        posterSrcset = ${PropTypes.string}
        posterWidth = ${PropTypes.integer}
        posterHeight = ${PropTypes.integer}
        loadImageStrategy = ${PropTypes.oneOf(['lazy', 'eager', null, false])}
        aspectRatio = ${PropTypes.anyOf(PropTypes.string, PropTypes.float, PropTypes.integer)}
        setAspectRatioClass = ${PropTypes.boolean}
        preserveAspectRatio = ${PropTypes.boolean}
        useYoutubeNoCookieDomain = ${PropTypes.boolean}
        fallbackAspectRatio = ${PropTypes.anyOf(PropTypes.string, PropTypes.float, PropTypes.integer)}
        controls = ${PropTypes.boolean}
        lightbox = ${PropTypes.boolean}
        wrapper = ${PropTypes.anyOf(PropTypes.string, PropTypes.boolean)}
        gdprHandling = ${PropTypes.oneOf([true, false, 'popup']).isRequired}
        loop = ${PropTypes.boolean}
        debug = ${PropTypes.boolean}
        videoID = ${PropTypes.anyOf(PropTypes.string, PropTypes.integer)}

        # YouTube only
        playlistID = ${PropTypes.anyOf(PropTypes.string, PropTypes.integer)}

        # Vimeo only
        color = ${PropTypes.anyOf(PropTypes.string, PropTypes.boolean)}
    }

    loadImageStrategy = ${Configuration.setting('Jonnitto.PrettyEmbed.loadImageStrategy')}
    wrapper = ${Configuration.setting('Jonnitto.PrettyEmbed.wrapper')}
    debug = ${Configuration.setting('Jonnitto.PrettyEmbed.debug')}
    gdprHandling = true
    controls = true

    preserveAspectRatio = true
    fallbackAspectRatio = '16 / 9'
    aspectRatio = null
    aspectRatio.@process.fallback =${value || this.fallbackAspectRatio}
    setAspectRatioClass = ${this.lightbox && this.preserveAspectRatio ? false : !!this.aspectRatio}

    // Set this to true if poster, aspectRatio, videoID, playlistID, href, embedHref are values from AlpineJS
    alpineJsValues = false

    @if {
        checkPlayer = ${this.player == 'YouTube' || this.player == 'Vimeo'}
        checkVimeo = ${this.player == 'Vimeo' ? (this.videoID && this.href && this.embedHref) : true}
        checkYouTube = ${this.player == 'YouTube' ? (this.videoID && this.href && this.embedHref) : true}
        checkPreviewImage = ${this.poster || this.preview}
    }

    @private {
        alwaysOpenInPopup = ${props.gdprHandling == 'popup'}
        fileLoader = Jonnitto.PrettyEmbed:Assets {
            player = ${props.player}
            gdprHandling = ${props.gdprHandling}
            debug = ${props.debug}
        }
        fileLoaderAsAttributes = ${!Type.isString(private.fileLoader)}
    }

    renderer = afx`
        <Jonnitto.PrettyEmbed:Presenation.Wrapper wrapper={props.wrapper}>
            <aside
                x-data
                x-prettyembedvimeo={AlpineJS.object({
                    gdpr: props.gdprHandling || null,
                    video: props.alpineJsValues ? AlpineJS.expression(props.videoID) : props.videoID,
                    hash: props.hash ? (props.alpineJsValues ? AlpineJS.expression(props.hash) : props.hash) : null,
                    color: Type.isString(props.color) ? props.color : null,
                    slim: !props.controls || null,
                    style: props.lightbox && 'lightbox' || null,
                    loop: props.loop || null
                })}
                x-prettyembedvimeo.@if={props.player == 'Vimeo' && !private.alwaysOpenInPopup}
                x-prettyembedyoutube={AlpineJS.object({
                    gdpr: props.gdprHandling || null,
                    video: props.videoID ? (props.alpineJsValues ? AlpineJS.expression(props.videoID) : props.videoID) : null,
                    playlist: props.videoID ? (props.alpineJsValues ? AlpineJS.expression(props.playlistID) : props.playlistID) : null,
                    slim: !props.controls || null,
                    style: props.lightbox && 'lightbox' || null,
                    loop: props.loop || null,
                    noCookie: props.useYoutubeNoCookieDomain || null
                })}
                x-prettyembedyoutube.@if={props.player== 'YouTube' && !private.alwaysOpenInPopup}
                aria-label={props.label}
                id={props.id}
                class={Carbon.String.merge(props.class, BEM.modifier('jonnitto-prettyembed', String.toLowerCase(props.player)), props.setAspectRatioClass && 'jonnitto-prettyembed-ratio')}
                style={props.aspectRatio && !props.alpineJsValues ? '--aspect-ratio:' + props.aspectRatio :  null}
                :style={props.aspectRatio && props.alpineJsValues ? ("{'--aspect-ratio':" + props.aspectRatio + "}") :  null}
                {...(private.fileLoaderAsAttributes ? private.fileLoader : {})}
            >
                {private.fileLoaderAsAttributes ? '' : private.fileLoader}
                <Jonnitto.PrettyEmbed:Presentation.Button.Play
                    @if={!private.alwaysOpenInPopup}
                    show={props.controls ? "!loaded" : "!playing"}
                    show.@if={!props.lightbox}
                    onClick="load"
                    href={props.href}
                    alpineJsValues={props.alpineJsValues}
                />
                <Jonnitto.PrettyEmbed:Presentation.Button.Play
                    @if={private.alwaysOpenInPopup}
                    href={props.href}
                    popup={props.embedHref}
                    alpineJsValues={props.alpineJsValues}
                    />
                <Jonnitto.PrettyEmbed:Presentation.Button.Pause
                    @if={!props.controls && !props.lightbox && !private.alwaysOpenInPopup}
                    />
                <Jonnitto.PrettyEmbed:Presentation.GdprConsent
                    @if={props.gdprHandling == true}
                    href={props.href}
                    embedHref={props.embedHref}
                    alpineJsValues={props.alpineJsValues}
                    />
                <Jonnitto.PrettyEmbed:Presentation.Preview
                    show={private.alwaysOpenInPopup || props.lightbox ? null : "!loaded"}
                    content={props.preview}
                    label={props.label}
                    src={props.poster}
                    src2x={props.poster2x}
                    srcset={props.posterSrcset}
                    width={props.posterWidth}
                    height={props.posterHeight}
                    loadImageStrategy={props.loadImageStrategy}
                    alpineJsValues={props.alpineJsValues}
                    />
                <Jonnitto.PrettyEmbed:Presentation.YouTubeTarget
                    @if={!props.lightbox}
                    player={props.player}
                    controls={props.controls}
                    />
                <Jonnitto.PrettyEmbed:Presentation.Lightbox
                    @if={props.lightbox && !private.alwaysOpenInPopup }
                    aspectRatio={props.aspectRatio}
                    alpineJsValues={props.alpineJsValues}
                    player={props.player}
                    playButton={!props.controls}
                    pauseButton={!props.controls}
                />
            </aside>
        </Jonnitto.PrettyEmbed:Presenation.Wrapper>
    `
}
