prototype(Jonnitto.PrettyEmbed:Presentation.Video) < prototype(Neos.Fusion:Component) {
    @propTypes {
        class = ${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.string ) )}
        id = ${PropTypes.string}
        label = ${PropTypes.string}
        preview = ${PropTypes.string}
        poster = ${PropTypes.string}
        poster2x = ${PropTypes.string}
        posterSrcset = ${PropTypes.string}
        posterWidth = ${PropTypes.integer}
        posterHeight = ${PropTypes.integer}
        loadImageStrategy = ${PropTypes.oneOf(['lazy', 'eager', null, false])}
        preload = ${PropTypes.oneOf(['none', 'metadata', 'auto'])}
        crossorigin = ${PropTypes.oneOf(['anonymous', 'use-credentials', true, false])}
        controls = ${PropTypes.boolean}
        lightbox = ${PropTypes.boolean}
        wrapper = ${PropTypes.anyOf(PropTypes.string, PropTypes.boolean)}
        loop = ${PropTypes.boolean}
        streaming = ${PropTypes.string}
        autoplay = ${PropTypes.boolean}
        muted = ${PropTypes.boolean}
        alpineJsValues = ${PropTypes.boolean}
        width = ${PropTypes.anyOf(PropTypes.string, PropTypes.string)}
        height = ${PropTypes.anyOf(PropTypes.string, PropTypes.string)}

        # Should be source tags
        content = ${PropTypes.string}
    }

    loadImageStrategy = ${Configuration.setting('Jonnitto.PrettyEmbed.loadImageStrategy')}

    controls = ${Configuration.setting('Jonnitto.PrettyEmbed.Video.controls')}
    lightbox = ${Configuration.setting('Jonnitto.PrettyEmbed.Video.lightbox')}
    autoplay = ${Configuration.setting('Jonnitto.PrettyEmbed.Video.autoplay')}
    loop = ${Configuration.setting('Jonnitto.PrettyEmbed.Video.loop')}
    muted = ${Configuration.setting('Jonnitto.PrettyEmbed.Video.muted')}
    preload = ${Configuration.setting('Jonnitto.PrettyEmbed.Video.preload')}
    crossorigin = ${Configuration.setting('Jonnitto.PrettyEmbed.Video.crossorigin')}
    debug = ${Configuration.setting('Jonnitto.PrettyEmbed.debug')}

    wrapper = ${Configuration.setting('Jonnitto.PrettyEmbed.wrapper')}

    // Set this to true if streaming, poster are values from AlpineJS
    // width, height are option AlpineJS values
    alpineJsValues = false

    @if.checkVideo = ${(this.poster || this.preview) && (this.content || this.streaming)}

    @private {
        video = afx`
            <video
                x-prettyembedmedia:media={props.alpineJsValues && props.streaming ? AlpineJS.expression(props.streaming) : (props.streaming || true)}
                x-show="loaded"
                x-cloak
                preload={props.preload}
                playsinline
                autoplay={props.autoplay}
                loop={props.streaming ? null : props.loop}
                muted={props.autoplay || props.muted}
                controls={props.controls}
                crossorigin={props.crossorigin}
                poster={props.alpineJsValues ? null : props.poster}
                :poster={props.alpineJsValues ? props.poster : null}
                width={!props.alpineJsValues || Type.isInteger(props.width) ? props.width : null}
                height={!props.alpineJsValues || Type.isInteger(props.height) ? props.height : null}
                :width={props.alpineJsValues && Type.isString(props.width) ? props.width : null}
                :height={props.alpineJsValues && Type.isString(props.height) ? props.height : null}
            >
                {props.streaming ? '' : props.content}
            </video>
        `
        fileLoader = Jonnitto.PrettyEmbed:Assets {
            player = 'Video'
            debug = ${props.debug}
        }
        fileLoaderAsAttributes = ${!Type.isString(private.fileLoader)}
    }

    renderer = afx`
        <Jonnitto.PrettyEmbed:Presenation.Wrapper wrapper={props.wrapper}>
            <aside
                x-data
                x-prettyembedmedia={!props.streaming && !props.lightbox}
                "x-prettyembedmedia.lightbox"={!props.streaming && props.lightbox}
                "x-prettyembedmedia.streaming.lightbox"={props.streaming && props.lightbox}
                "x-prettyembedmedia.streaming"={props.streaming && !props.lightbox}
                aria-label={props.label}
                id={props.id}
                class={Carbon.String.merge(props.class, BEM.modifier('jonnitto-prettyembed', 'video'))}
                {...(private.fileLoaderAsAttributes ? private.fileLoader : {})}
            >
                {private.fileLoaderAsAttributes ? '' : private.fileLoader}
                <Jonnitto.PrettyEmbed:Presentation.Preview
                    show={props.lightbox ? null : '!loaded'}
                    content={props.preview}
                    label={props.label}
                    src={props.poster}
                    src2x={props.poster2x}
                    srcset={props.posterSrcset}
                    width={props.posterWidth}
                    height={props.posterHeight}
                    loadImageStrategy={props.loadImageStrategy}
                    alpineJsValues={props.alpineJsValues}
                />
                {props.lightbox ? '' : private.video}
                <Jonnitto.PrettyEmbed:Presentation.Button.Play
                    onClick="play"
                    show={props.lightbox ? null : '!playing'}
                />
                <Jonnitto.PrettyEmbed:Presentation.Button.Pause
                    @if={!props.controls && !props.lightbox}
                />
                <Jonnitto.PrettyEmbed:Presentation.Lightbox
                    @if={props.lightbox}
                    player="Video"
                    playButton={true}
                    pauseButton={!props.controls}
                    content={private.video}
                />
            </aside>
        </Jonnitto.PrettyEmbed:Presenation.Wrapper>
    `
}
